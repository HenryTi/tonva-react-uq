import { ViewModel, TypeContent } from './viewModel';
import { Tuid, Action, Sheet, Query, Book, Entity } from '../entities';
import { VmLink, VmEntityLink } from './link';
import { VmBookMain } from './book';
import { VmSheetMain } from './sheet';
import { VmActionMain } from './action';
import { VmQueryMain } from './query';
import { VmTuidMain } from './tuid';
import { VmApp } from './vmApp';
import { TypeVmTuidControl, PickerConfig } from './vmFieldsForm';
export declare class VmApi extends ViewModel {
    private url;
    private access;
    private ui;
    private entities;
    constructor(vmApp: VmApp, url: string, api: string, access: string, ui: any);
    api: string;
    vmApp: VmApp;
    load(): Promise<void>;
    getTuid(name: string): Tuid;
    protected isSysVisible: boolean;
    protected isVisible(entity: Entity): boolean;
    private getUI;
    protected readonly tuidTypeCaption: string;
    protected readonly vmTuidLinks: VmEntityLink<VmTuidMain>[];
    newVmTuidLink(vmTuid: VmTuidMain): VmEntityLink<VmTuidMain>;
    newVmTuid(tuid: Tuid): VmTuidMain;
    protected readonly sheetTypeCaption: string;
    newVmSheetLink(vmSheet: VmSheetMain): VmEntityLink<VmSheetMain>;
    newVmSheet(sheet: Sheet): VmSheetMain;
    protected readonly vmSheetLinks: VmEntityLink<VmSheetMain>[];
    readonly actionTypeCaption: string;
    newVmActionLink(vmAction: VmActionMain): VmEntityLink<VmActionMain>;
    newVmAction(action: Action): VmActionMain;
    protected readonly vmActionLinks: VmEntityLink<VmActionMain>[];
    readonly queryTypeCaption: string;
    newVmQueryLink(vmQuery: VmQueryMain): VmEntityLink<VmQueryMain>;
    newVmQuery(query: Query): VmQueryMain;
    protected readonly vmQueryLinks: VmEntityLink<VmQueryMain>[];
    readonly bookTypeCaption: string;
    newVmBookLink(vmBook: VmBookMain): VmEntityLink<VmBookMain>;
    newVmBook(book: Book): VmBookMain;
    protected readonly vmBookLinks: VmEntityLink<VmBookMain>[];
    renderLink(vmLink: VmLink, index: number): JSX.Element;
    linkClick(vmLink: VmLink): void;
    typeVmTuidControl(tuid: Tuid): TypeVmTuidControl;
    pickerConfig(tuid: Tuid): PickerConfig;
    typeTuidContent(tuid: Tuid): TypeContent;
    renderView(): JSX.Element;
}
